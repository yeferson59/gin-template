version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    container_name: gin-api-prod
    restart: unless-stopped
    environment:
      # Application
      APP_ENV: production
      GIN_MODE: release
      PORT: 8080
      
      # Logging
      LOG_LEVEL: info
      LOG_FORMAT: json
      
      # Database (use PostgreSQL for production)
      DB_DRIVER: postgres
      DB_DSN: "host=postgres user=api_user password=${POSTGRES_PASSWORD} dbname=gin_api_prod port=5432 sslmode=require"
      DB_MAX_OPEN_CONNS: 100
      DB_MAX_IDLE_CONNS: 10
      DB_CONN_MAX_LIFETIME: 30m
      
      # JWT (MUST be set via secrets in production)
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXP_MINUTES: 15m
      JWT_REFRESH_MINUTES: 7d
      JWT_ISSUER: gin-api-prod
      
      # Security
      RATE_LIMIT_RPS: 5.0
      RATE_LIMIT_BURST: 10
      AUTH_RATE_LIMIT: 3
      CORS_ENABLED: true
      CORS_ORIGINS: "https://yourdomain.com"
      
      # Server timeouts
      READ_TIMEOUT: 30s
      WRITE_TIMEOUT: 30s
      MAX_BODY_SIZE: 10485760  # 10MB
    
    ports:
      - "8080:8080"
    
    depends_on:
      postgres:
        condition: service_healthy
    
    networks:
      - api-network
    
    volumes:
      # Mount logs directory for persistence
      - api-logs:/app/logs
    
    healthcheck:
      test: ["CMD", "./api", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  postgres:
    image: postgres:16-alpine
    container_name: gin-api-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: gin_api_prod
      POSTGRES_USER: api_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    networks:
      - api-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U api_user -d gin_api_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Don't expose PostgreSQL port externally in production
    # ports:
    #   - "5432:5432"

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: gin-api-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
      - nginx-cache:/var/cache/nginx
    
    depends_on:
      - api
    
    networks:
      - api-network
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  api-logs:
    driver: local
  nginx-cache:
    driver: local

networks:
  api-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
